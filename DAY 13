 Sort An Array of 0s, 1s and 2s
Easy
40/40
Average time to solve is 10m
Contributed by
169 upvotes
Asked in companies
Problem statement
You have been given an array/list 'arr' consisting of 'n' elements.



Each element in the array is either 0, 1 or 2.



Sort this array/list in increasing order.



Do not make a new array/list. Make changes in the given array/list.



Example :
Input: 'arr' = [2, 2, 2, 2, 0, 0, 1, 0]

Output: Final 'arr' = [0, 0, 0, 1, 2, 2, 2, 2]

Explanation: The array is sorted in increasing order.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
8
2 2 2 2 0 0 1 0


Sample Output 1:
0 0 0 1 2 2 2 2


Explanation of sample input 1 :
The initial array 'arr' is [2, 2, 2, 2, 0, 0, 1, 0].

After sorting the array in increasing order, 'arr' is equal to:
[0, 0, 0, 1, 2, 2, 2, 2]


Sample Input 2:
5
1 1 1 1 1


Sample Output 2:
1 1 1 1 1


Expected time complexity :
The expected time complexity is O(n).


Constraints:
1 <= 'n' <= 10 ^ 4
0 <= 'arr[i]' <= 2

Time limit: 1 second


Solution-
import java.util.* ;
import java.io.*; 
public class Solution {
    public static void sortArray(ArrayList<Integer> arr, int n) {
      int cnto = 0;
      int cntz = 0;
      int cntt = 0;
      for(int i = 0;i < n;i++)
      {
          if(arr.get(i) == 1)
          {
              cnto++;
          }
          else if(arr.get(i) == 2)
          {
              cntt++;
          }
          else if(arr.get(i) == 0)
          {
              cntz++;
          }


      }
      int ans[] = new int[n];
      int j = 0;
      for(int i = 0;i < cntz;i++)
      {
          arr.set(j, 0);
          j++;
      }
       for(int i = 0;i < cnto;i++)
      {
         arr.set(j, 1);
          j++;
      }
        for(int i = 0;i < cntt;i++)
      {
         arr.set(j, 2);
          j++;
      }
     
    }
}
